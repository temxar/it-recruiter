stages:
  - build
  - deploy

variables:
  IMAGE_TAG: app_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}
  IMAGE_NAME: ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}

.before_script_build: &script_build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.add_ssh_key: &add_ssh_key
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - apk add openssh-client
  - eval $(ssh-agent -s)
  - echo "${DEPLOY_KEY}" | tr -d '\r' | ssh-add -
  - ssh-keyscan -H ${DEPLOY_HOST} >> ~/.ssh/known_hosts

.deploy_script: &deploy_script
  - *add_ssh_key
  - ssh ${DEPLOY_USER}@${DEPLOY_HOST} "cd ${WORK_DIR} &&
    git fetch origin &&
    git checkout $CI_COMMIT_REF_NAME &&
    git pull origin $CI_COMMIT_REF_NAME &&
    docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
    export CONTAINER_IMAGE_TAG=${IMAGE_TAG} &&
    export APP_PORT=${APP_PORT} &&
    envsubst < docker-compose.template.yml > docker-compose.yml &&
    docker-compose up -d"

.docker_build: &docker_build
  - docker build -f docker/${CI_COMMIT_REF_NAME}/Dockerfile -t ${IMAGE_NAME} .
  - docker push ${IMAGE_NAME}

build_dev:
  stage: build
  image: docker:20.10.16
  <<: *script_build
  services:
    - docker:20.10.16-dind
  tags:
    - build
  only:
    - dev
  environment:
    name: dev
  script:
    *docker_build

deploy_dev:
  needs:
    - build_dev
  stage: deploy
  tags:
    - alpine
  only:
    - dev
  environment:
    name: dev
  script:
    *deploy_script

build_prod:
  stage: build
  image: docker:20.10.16
  <<: *script_build
  services:
    - docker:20.10.16-dind
  tags:
    - build
  only:
    - master
  environment:
    name: prod
  script:
    *docker_build

deploy_prod:
  needs:
    - build_prod
  stage: deploy
  tags:
    - alpine
  only:
    - master
  environment:
    name: prod
  script:
    *deploy_script
